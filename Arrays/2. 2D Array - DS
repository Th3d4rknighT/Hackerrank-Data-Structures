import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    static int gcd(int p,int q)
    {
        if (q == 0) return p;
        if (p == 0) return q;


        if ((p & 1) == 0 && (q & 1) == 0) return gcd(p >> 1, q >> 1) << 1;


        else if ((p & 1) == 0) return gcd(p >> 1, q);


        else if ((q & 1) == 0) return gcd(p, q >> 1);


        else if (p >= q) return gcd((p-q) >> 1, q);


        else return gcd(p, (q-p) >> 1);
    }
    static int maximumGcdAndSum(int[] A, int[] B) {
        int gcd=Integer.MIN_VALUE;    
        int sum=Integer.MIN_VALUE;
       for(int i=A.length-1;i>=0;i--)
            {
                for(int j=0;j<A.length;j++)
                {                  
                      
                            int local_gd=gcd(A[i],B[j]);
                                
                            if(local_gd>gcd)
                            {
                                gcd=local_gd;
                                sum=A[i]+B[j];
                            }
                            else if(local_gd==gcd)
                            {
                                if(A[i]+B[j]>sum)
                                    sum=A[i]+B[j]; 
                            }
                        
                }
            }
      
        return sum;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] A = new int[n];
        for(int A_i = 0; A_i < n; A_i++){
            A[A_i] = in.nextInt();
        }
        int[] B = new int[n];
        for(int B_i = 0; B_i < n; B_i++){
            B[B_i] = in.nextInt();
        }
        int res = maximumGcdAndSum(A, B);
        System.out.println(res);
    }
}
